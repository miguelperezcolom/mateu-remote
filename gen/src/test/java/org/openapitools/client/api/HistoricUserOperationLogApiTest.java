/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnotationDto;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.UserOperationLogEntryDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricUserOperationLogApi
 */
@Ignore
public class HistoricUserOperationLogApiTest {

    private final HistoricUserOperationLogApi api = new HistoricUserOperationLogApi();

    
    /**
     * Clear Annotation of an User Operation Log (Historic)
     *
     * Clear the annotation which was previously set for auditing reasons.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearAnnotationUserOperationLogTest() throws ApiException {
        String operationId = null;
        api.clearAnnotationUserOperationLog(operationId);

        // TODO: test validations
    }
    
    /**
     * Get User Operation Log Count
     *
     * Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.18/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryUserOperationCountTest() throws ApiException {
        String deploymentId = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processInstanceId = null;
        String executionId = null;
        String caseDefinitionId = null;
        String caseInstanceId = null;
        String caseExecutionId = null;
        String taskId = null;
        String externalTaskId = null;
        String batchId = null;
        String jobId = null;
        String jobDefinitionId = null;
        String userId = null;
        String operationId = null;
        String operationType = null;
        String entityType = null;
        String entityTypeIn = null;
        String category = null;
        String categoryIn = null;
        String property = null;
        OffsetDateTime afterTimestamp = null;
        OffsetDateTime beforeTimestamp = null;
        CountResultDto response = api.queryUserOperationCount(deploymentId, processDefinitionId, processDefinitionKey, processInstanceId, executionId, caseDefinitionId, caseInstanceId, caseExecutionId, taskId, externalTaskId, batchId, jobId, jobDefinitionId, userId, operationId, operationType, entityType, entityTypeIn, category, categoryIn, property, afterTimestamp, beforeTimestamp);

        // TODO: test validations
    }
    
    /**
     * Get User Operation Log (Historic)
     *
     * Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryUserOperationEntriesTest() throws ApiException {
        String deploymentId = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processInstanceId = null;
        String executionId = null;
        String caseDefinitionId = null;
        String caseInstanceId = null;
        String caseExecutionId = null;
        String taskId = null;
        String externalTaskId = null;
        String batchId = null;
        String jobId = null;
        String jobDefinitionId = null;
        String userId = null;
        String operationId = null;
        String operationType = null;
        String entityType = null;
        String entityTypeIn = null;
        String category = null;
        String categoryIn = null;
        String property = null;
        OffsetDateTime afterTimestamp = null;
        OffsetDateTime beforeTimestamp = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        List<UserOperationLogEntryDto> response = api.queryUserOperationEntries(deploymentId, processDefinitionId, processDefinitionKey, processInstanceId, executionId, caseDefinitionId, caseInstanceId, caseExecutionId, taskId, externalTaskId, batchId, jobId, jobDefinitionId, userId, operationId, operationType, entityType, entityTypeIn, category, categoryIn, property, afterTimestamp, beforeTimestamp, sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Set Annotation to an User Operation Log (Historic)
     *
     * Set an annotation for auditing reasons.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnnotationUserOperationLogTest() throws ApiException {
        String operationId = null;
        AnnotationDto annotationDto = null;
        api.setAnnotationUserOperationLog(operationId, annotationDto);

        // TODO: test validations
    }
    
}
