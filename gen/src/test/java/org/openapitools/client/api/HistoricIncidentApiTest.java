/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.openapitools.client.model.HistoricIncidentDto;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricIncidentApi
 */
@Ignore
public class HistoricIncidentApiTest {

    private final HistoricIncidentApi api = new HistoricIncidentApi();

    
    /**
     * Get Incidents
     *
     * Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricIncidentsTest() throws ApiException {
        String incidentId = null;
        String incidentType = null;
        String incidentMessage = null;
        String incidentMessageLike = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processDefinitionKeyIn = null;
        String processInstanceId = null;
        String executionId = null;
        OffsetDateTime createTimeBefore = null;
        OffsetDateTime createTimeAfter = null;
        OffsetDateTime endTimeBefore = null;
        OffsetDateTime endTimeAfter = null;
        String activityId = null;
        String failedActivityId = null;
        String causeIncidentId = null;
        String rootCauseIncidentId = null;
        String _configuration = null;
        String historyConfiguration = null;
        Boolean open = null;
        Boolean resolved = null;
        Boolean deleted = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String jobDefinitionIdIn = null;
        String sortBy = null;
        String sortOrder = null;
        List<HistoricIncidentDto> response = api.getHistoricIncidents(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, _configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder);

        // TODO: test validations
    }
    
    /**
     * Get Incident Count
     *
     * Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricIncidentsCountTest() throws ApiException {
        String incidentId = null;
        String incidentType = null;
        String incidentMessage = null;
        String incidentMessageLike = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processDefinitionKeyIn = null;
        String processInstanceId = null;
        String executionId = null;
        OffsetDateTime createTimeBefore = null;
        OffsetDateTime createTimeAfter = null;
        OffsetDateTime endTimeBefore = null;
        OffsetDateTime endTimeAfter = null;
        String activityId = null;
        String failedActivityId = null;
        String causeIncidentId = null;
        String rootCauseIncidentId = null;
        String _configuration = null;
        String historyConfiguration = null;
        Boolean open = null;
        Boolean resolved = null;
        Boolean deleted = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String jobDefinitionIdIn = null;
        String sortBy = null;
        String sortOrder = null;
        CountResultDto response = api.getHistoricIncidentsCount(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, _configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder);

        // TODO: test validations
    }
    
}
