/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import java.io.File;
import org.openapitools.client.model.HistoricDetailDto;
import org.openapitools.client.model.HistoricDetailQueryDto;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricDetailApi
 */
@Ignore
public class HistoricDetailApiTest {

    private final HistoricDetailApi api = new HistoricDetailApi();

    
    /**
     * Get Historic Details
     *
     * Queries for historic details that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricDetailsTest() throws ApiException {
        String processInstanceId = null;
        String processInstanceIdIn = null;
        String executionId = null;
        String taskId = null;
        String activityInstanceId = null;
        String caseInstanceId = null;
        String caseExecutionId = null;
        String variableInstanceId = null;
        String variableTypeIn = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String userOperationId = null;
        Boolean formFields = null;
        Boolean variableUpdates = null;
        Boolean excludeTaskDetails = null;
        Boolean initial = null;
        OffsetDateTime occurredBefore = null;
        OffsetDateTime occurredAfter = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        Boolean deserializeValues = null;
        List<HistoricDetailDto> response = api.getHistoricDetails(processInstanceId, processInstanceIdIn, executionId, taskId, activityInstanceId, caseInstanceId, caseExecutionId, variableInstanceId, variableTypeIn, tenantIdIn, withoutTenantId, userOperationId, formFields, variableUpdates, excludeTaskDetails, initial, occurredBefore, occurredAfter, sortBy, sortOrder, firstResult, maxResults, deserializeValues);

        // TODO: test validations
    }
    
    /**
     * Get Historic Detail Count
     *
     * Queries for the number of historic details that fulfill the given parameters. Takes the same parameters as the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricDetailsCountTest() throws ApiException {
        String processInstanceId = null;
        String processInstanceIdIn = null;
        String executionId = null;
        String taskId = null;
        String activityInstanceId = null;
        String caseInstanceId = null;
        String caseExecutionId = null;
        String variableInstanceId = null;
        String variableTypeIn = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String userOperationId = null;
        Boolean formFields = null;
        Boolean variableUpdates = null;
        Boolean excludeTaskDetails = null;
        Boolean initial = null;
        OffsetDateTime occurredBefore = null;
        OffsetDateTime occurredAfter = null;
        CountResultDto response = api.getHistoricDetailsCount(processInstanceId, processInstanceIdIn, executionId, taskId, activityInstanceId, caseInstanceId, caseExecutionId, variableInstanceId, variableTypeIn, tenantIdIn, withoutTenantId, userOperationId, formFields, variableUpdates, excludeTaskDetails, initial, occurredBefore, occurredAfter);

        // TODO: test validations
    }
    
    /**
     * Get Historic Detail
     *
     * Retrieves a historic detail by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void historicDetailTest() throws ApiException {
        String id = null;
        Boolean deserializeValue = null;
        HistoricDetailDto response = api.historicDetail(id, deserializeValue);

        // TODO: test validations
    }
    
    /**
     * Get Historic Detail (Binary)
     *
     * Retrieves the content of a historic variable update by id. Applicable for byte array and file variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void historicDetailBinaryTest() throws ApiException {
        String id = null;
        File response = api.historicDetailBinary(id);

        // TODO: test validations
    }
    
    /**
     * Get Historic Details (POST)
     *
     * Queries for historic details that fulfill the given parameters. This method is slightly more powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method because it allows sorting by multiple parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryHistoricDetailsTest() throws ApiException {
        Integer firstResult = null;
        Integer maxResults = null;
        Boolean deserializeValues = null;
        HistoricDetailQueryDto historicDetailQueryDto = null;
        List<HistoricDetailDto> response = api.queryHistoricDetails(firstResult, maxResults, deserializeValues, historicDetailQueryDto);

        // TODO: test validations
    }
    
}
