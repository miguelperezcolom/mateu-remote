/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchDto;
import org.openapitools.client.model.CleanableHistoricBatchReportResultDto;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.openapitools.client.model.HistoricBatchDto;
import org.openapitools.client.model.SetRemovalTimeToHistoricBatchesDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricBatchApi
 */
@Ignore
public class HistoricBatchApiTest {

    private final HistoricBatchApi api = new HistoricBatchApi();

    
    /**
     * Delete Historic Batch
     *
     * Deletes a historic batch by id, including related historic job logs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHistoricBatchTest() throws ApiException {
        String id = null;
        api.deleteHistoricBatch(id);

        // TODO: test validations
    }
    
    /**
     * Get Cleanable Batch Report
     *
     * Retrieves a report about a historic batch operations relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup) ) so that you can tune the history time to live. These reports include the count of the finished batches, cleanable batches and type of the batch. The size of the result set can be retrieved by using the [Get Cleanable Batch Report Count](https://docs.camunda.org/manual/7.18/reference/rest/history/batch/get-cleanable-batch-report-count/) method.  **Please note:** The history time to live for batch operations does not support [Multi-Tenancy](https://docs.camunda.org/manual/7.18/user-guide/process-engine/multi-tenancy.md). The report will return an information for all batch operations (for all tenants) if you have permissions to see the history. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCleanableHistoricBatchesReportTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        List<CleanableHistoricBatchReportResultDto> response = api.getCleanableHistoricBatchesReport(sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Get Cleanable Batch Report Count
     *
     * Queries for the number of report results about a historic batch operations relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup) ). Takes the same parameters as the [Get Cleanable Batch Report](https://docs.camunda.org/manual/7.18/reference/rest/history/batch/get-cleanable-batch-report/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCleanableHistoricBatchesReportCountTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        CountResultDto response = api.getCleanableHistoricBatchesReportCount(sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Get Historic Batch
     *
     * Retrieves a historic batch by id, according to the &#x60;HistoricBatch&#x60; interface in the engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricBatchTest() throws ApiException {
        String id = null;
        HistoricBatchDto response = api.getHistoricBatch(id);

        // TODO: test validations
    }
    
    /**
     * Get Historic Batches
     *
     * Queries for historic batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the [Get Historic Batch Count](https://docs.camunda.org/manual/7.18/reference/rest/history/batch/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricBatchesTest() throws ApiException {
        String batchId = null;
        String type = null;
        Boolean completed = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        List<HistoricBatchDto> response = api.getHistoricBatches(batchId, type, completed, tenantIdIn, withoutTenantId, sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Get Historic Batch Count
     *
     * Requests the number of historic batches that fulfill the query criteria. Takes the same filtering parameters as the [Get Historic Batches](https://docs.camunda.org/manual/7.18/reference/rest/history/batch/get-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricBatchesCountTest() throws ApiException {
        String batchId = null;
        String type = null;
        Boolean completed = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        CountResultDto response = api.getHistoricBatchesCount(batchId, type, completed, tenantIdIn, withoutTenantId);

        // TODO: test validations
    }
    
    /**
     * Set Removal Time Async (POST)
     *
     * Sets the removal time to multiple historic batches asynchronously (batch).  At least __historicBatchIds__ or __historicBatchQuery__ has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRemovalTimeAsyncHistoricBatchTest() throws ApiException {
        SetRemovalTimeToHistoricBatchesDto setRemovalTimeToHistoricBatchesDto = null;
        BatchDto response = api.setRemovalTimeAsyncHistoricBatch(setRemovalTimeToHistoricBatchesDto);

        // TODO: test validations
    }
    
}
