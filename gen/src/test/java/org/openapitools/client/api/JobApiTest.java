/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchDto;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.openapitools.client.model.JobDto;
import org.openapitools.client.model.JobDuedateDto;
import org.openapitools.client.model.JobQueryDto;
import org.openapitools.client.model.JobSuspensionStateDto;
import org.openapitools.client.model.PriorityDto;
import org.openapitools.client.model.RetriesDto;
import org.openapitools.client.model.SetJobRetriesDto;
import org.openapitools.client.model.SuspensionStateDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobApi
 */
@Ignore
public class JobApiTest {

    private final JobApi api = new JobApi();

    
    /**
     * Execute Job
     *
     * Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeJobTest() throws ApiException {
        String id = null;
        api.executeJob(id);

        // TODO: test validations
    }
    
    /**
     * Get Job
     *
     * Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String id = null;
        JobDto response = api.getJob(id);

        // TODO: test validations
    }
    
    /**
     * Get Jobs
     *
     * Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.18/reference/rest/job/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        String jobId = null;
        String jobIds = null;
        String jobDefinitionId = null;
        String processInstanceId = null;
        String processInstanceIds = null;
        String executionId = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String activityId = null;
        Boolean withRetriesLeft = null;
        Boolean executable = null;
        Boolean timers = null;
        Boolean messages = null;
        String dueDates = null;
        String createTimes = null;
        Boolean withException = null;
        String exceptionMessage = null;
        String failedActivityId = null;
        Boolean noRetriesLeft = null;
        Boolean active = null;
        Boolean suspended = null;
        Long priorityLowerThanOrEquals = null;
        Long priorityHigherThanOrEquals = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        Boolean includeJobsWithoutTenantId = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        List<JobDto> response = api.getJobs(jobId, jobIds, jobDefinitionId, processInstanceId, processInstanceIds, executionId, processDefinitionId, processDefinitionKey, activityId, withRetriesLeft, executable, timers, messages, dueDates, createTimes, withException, exceptionMessage, failedActivityId, noRetriesLeft, active, suspended, priorityLowerThanOrEquals, priorityHigherThanOrEquals, tenantIdIn, withoutTenantId, includeJobsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Get Job Count
     *
     * Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.18/reference/rest/job/get-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsCountTest() throws ApiException {
        String jobId = null;
        String jobIds = null;
        String jobDefinitionId = null;
        String processInstanceId = null;
        String processInstanceIds = null;
        String executionId = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String activityId = null;
        Boolean withRetriesLeft = null;
        Boolean executable = null;
        Boolean timers = null;
        Boolean messages = null;
        String dueDates = null;
        String createTimes = null;
        Boolean withException = null;
        String exceptionMessage = null;
        String failedActivityId = null;
        Boolean noRetriesLeft = null;
        Boolean active = null;
        Boolean suspended = null;
        Long priorityLowerThanOrEquals = null;
        Long priorityHigherThanOrEquals = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        Boolean includeJobsWithoutTenantId = null;
        CountResultDto response = api.getJobsCount(jobId, jobIds, jobDefinitionId, processInstanceId, processInstanceIds, executionId, processDefinitionId, processDefinitionKey, activityId, withRetriesLeft, executable, timers, messages, dueDates, createTimes, withException, exceptionMessage, failedActivityId, noRetriesLeft, active, suspended, priorityLowerThanOrEquals, priorityHigherThanOrEquals, tenantIdIn, withoutTenantId, includeJobsWithoutTenantId);

        // TODO: test validations
    }
    
    /**
     * Get Exception Stacktrace
     *
     * Retrieves the exception stacktrace corresponding to the passed job id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStacktraceTest() throws ApiException {
        String id = null;
        Object response = api.getStacktrace(id);

        // TODO: test validations
    }
    
    /**
     * Get Jobs (POST)
     *
     * Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.18/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryJobsTest() throws ApiException {
        Integer firstResult = null;
        Integer maxResults = null;
        JobQueryDto jobQueryDto = null;
        List<JobDto> response = api.queryJobs(firstResult, maxResults, jobQueryDto);

        // TODO: test validations
    }
    
    /**
     * Get Job Count (POST)
     *
     * Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.18/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.18/reference/rest/job/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryJobsCountTest() throws ApiException {
        JobQueryDto jobQueryDto = null;
        CountResultDto response = api.queryJobsCount(jobQueryDto);

        // TODO: test validations
    }
    
    /**
     * Recalculate Job Due Date
     *
     * Recalculates the due date of a job by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recalculateDuedateTest() throws ApiException {
        String id = null;
        Boolean creationDateBased = null;
        api.recalculateDuedate(id, creationDateBased);

        // TODO: test validations
    }
    
    /**
     * Set Job Due Date
     *
     * Updates the due date of a job by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setJobDuedateTest() throws ApiException {
        String id = null;
        JobDuedateDto jobDuedateDto = null;
        api.setJobDuedate(id, jobDuedateDto);

        // TODO: test validations
    }
    
    /**
     * Set Job Priority
     *
     * Sets the execution priority of a job by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setJobPriorityTest() throws ApiException {
        String id = null;
        PriorityDto priorityDto = null;
        api.setJobPriority(id, priorityDto);

        // TODO: test validations
    }
    
    /**
     * Set Job Retries
     *
     * Sets the retries of the job to the given number of retries by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setJobRetriesTest() throws ApiException {
        String id = null;
        RetriesDto retriesDto = null;
        api.setJobRetries(id, retriesDto);

        // TODO: test validations
    }
    
    /**
     * Set Job Retries Async (POST)
     *
     * Create a batch to set retries of jobs asynchronously.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setJobRetriesAsyncOperationTest() throws ApiException {
        SetJobRetriesDto setJobRetriesDto = null;
        BatchDto response = api.setJobRetriesAsyncOperation(setJobRetriesDto);

        // TODO: test validations
    }
    
    /**
     * Activate/Suspend Job By Id
     *
     * Activates or suspends a given job by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobSuspensionStateTest() throws ApiException {
        String id = null;
        SuspensionStateDto suspensionStateDto = null;
        api.updateJobSuspensionState(id, suspensionStateDto);

        // TODO: test validations
    }
    
    /**
     * Activate/Suspend Jobs
     *
     * Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSuspensionStateByTest() throws ApiException {
        JobSuspensionStateDto jobSuspensionStateDto = null;
        api.updateSuspensionStateBy(jobSuspensionStateDto);

        // TODO: test validations
    }
    
}
