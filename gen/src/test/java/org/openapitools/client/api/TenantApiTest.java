/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.openapitools.client.model.ResourceOptionsDto;
import org.openapitools.client.model.TenantDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TenantApi
 */
@Ignore
public class TenantApiTest {

    private final TenantApi api = new TenantApi();

    
    /**
     * Tenant Group Membership Resource Options
     *
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availableTenantGroupMembersOperationsTest() throws ApiException {
        String id = null;
        ResourceOptionsDto response = api.availableTenantGroupMembersOperations(id);

        // TODO: test validations
    }
    
    /**
     * Tenant Resource Options
     *
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant/{id}&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availableTenantInstanceOperationsTest() throws ApiException {
        String id = null;
        ResourceOptionsDto response = api.availableTenantInstanceOperations(id);

        // TODO: test validations
    }
    
    /**
     * Tenant Resource Options
     *
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availableTenantResourceOperationsTest() throws ApiException {
        ResourceOptionsDto response = api.availableTenantResourceOperations();

        // TODO: test validations
    }
    
    /**
     * Tenant User Membership Resource Options
     *
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availableTenantUserMembersOperationsTest() throws ApiException {
        String id = null;
        ResourceOptionsDto response = api.availableTenantUserMembersOperations(id);

        // TODO: test validations
    }
    
    /**
     * Create Tenant Group Membership
     *
     * Creates a membership between a tenant and a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupMembershipTest() throws ApiException {
        String id = null;
        String groupId = null;
        api.createGroupMembership(id, groupId);

        // TODO: test validations
    }
    
    /**
     * Create Tenant
     *
     * Create a new tenant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTenantTest() throws ApiException {
        TenantDto tenantDto = null;
        api.createTenant(tenantDto);

        // TODO: test validations
    }
    
    /**
     * Create Tenant User Membership
     *
     * Creates a membership between a tenant and an user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserMembershipTest() throws ApiException {
        String id = null;
        String userId = null;
        api.createUserMembership(id, userId);

        // TODO: test validations
    }
    
    /**
     * Create Tenant Group Membership
     *
     * Creates a membership between a tenant and a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupMembershipTest() throws ApiException {
        String id = null;
        String groupId = null;
        api.deleteGroupMembership(id, groupId);

        // TODO: test validations
    }
    
    /**
     * Delete Tenant
     *
     * Deletes a tenant by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTenantTest() throws ApiException {
        String id = null;
        api.deleteTenant(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Tenant User Membership
     *
     * Deletes a membership between a tenant and an user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserMembershipTest() throws ApiException {
        String id = null;
        String userId = null;
        api.deleteUserMembership(id, userId);

        // TODO: test validations
    }
    
    /**
     * Get Tenant
     *
     * Retrieves a tenant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantTest() throws ApiException {
        String id = null;
        TenantDto response = api.getTenant(id);

        // TODO: test validations
    }
    
    /**
     * Get Tenant Count
     *
     * Query for tenants using a list of parameters and retrieves the count.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantCountTest() throws ApiException {
        String id = null;
        String name = null;
        String nameLike = null;
        String userMember = null;
        String groupMember = null;
        Boolean includingGroupsOfUser = null;
        CountResultDto response = api.getTenantCount(id, name, nameLike, userMember, groupMember, includingGroupsOfUser);

        // TODO: test validations
    }
    
    /**
     * Get Tenants
     *
     * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.18/reference/rest/tenant/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryTenantsTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        String id = null;
        String name = null;
        String nameLike = null;
        String userMember = null;
        String groupMember = null;
        Boolean includingGroupsOfUser = null;
        List<TenantDto> response = api.queryTenants(sortBy, sortOrder, firstResult, maxResults, id, name, nameLike, userMember, groupMember, includingGroupsOfUser);

        // TODO: test validations
    }
    
    /**
     * Update Tenant
     *
     * Updates a given tenant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTenantTest() throws ApiException {
        String id = null;
        TenantDto tenantDto = null;
        api.updateTenant(id, tenantDto);

        // TODO: test validations
    }
    
}
