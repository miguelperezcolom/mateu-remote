/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.openapitools.client.model.GroupDto;
import org.openapitools.client.model.GroupQueryDto;
import org.openapitools.client.model.ResourceOptionsDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupApi
 */
@Ignore
public class GroupApiTest {

    private final GroupApi api = new GroupApi();

    
    /**
     * Group Resource Instance Options
     *
     * The &#x60;/group&#x60; resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/group/{id}&#x60; resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availableGroupInstanceOperationsTest() throws ApiException {
        String id = null;
        ResourceOptionsDto response = api.availableGroupInstanceOperations(id);

        // TODO: test validations
    }
    
    /**
     * Group Membership Resource Options
     *
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availableGroupMembersOperationsTest() throws ApiException {
        String id = null;
        ResourceOptionsDto response = api.availableGroupMembersOperations(id);

        // TODO: test validations
    }
    
    /**
     * Group Resource Options
     *
     * The &#x60;/group&#x60; resource supports two custom OPTIONS requests, this one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/group&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availableGroupOperationsTest() throws ApiException {
        ResourceOptionsDto response = api.availableGroupOperations();

        // TODO: test validations
    }
    
    /**
     * Create Group
     *
     * Creates a new group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        GroupDto groupDto = null;
        api.createGroup(groupDto);

        // TODO: test validations
    }
    
    /**
     * Create Group Member
     *
     * Adds a member to a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupMemberTest() throws ApiException {
        String id = null;
        String userId = null;
        api.createGroupMember(id, userId);

        // TODO: test validations
    }
    
    /**
     * Delete Group
     *
     * Deletes a group by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String id = null;
        api.deleteGroup(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Group Member
     *
     * Removes a member from a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupMemberTest() throws ApiException {
        String id = null;
        String userId = null;
        api.deleteGroupMember(id, userId);

        // TODO: test validations
    }
    
    /**
     * Get Group
     *
     * Retrieves a group by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupTest() throws ApiException {
        String id = null;
        GroupDto response = api.getGroup(id);

        // TODO: test validations
    }
    
    /**
     * Get List Count
     *
     * Queries for groups using a list of parameters and retrieves the count.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupCountTest() throws ApiException {
        String id = null;
        String idIn = null;
        String name = null;
        String nameLike = null;
        String type = null;
        String member = null;
        String memberOfTenant = null;
        CountResultDto response = api.getGroupCount(id, idIn, name, nameLike, type, member, memberOfTenant);

        // TODO: test validations
    }
    
    /**
     * Get List
     *
     * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count](https://docs.camunda.org/manual/7.18/reference/rest/group/get-query-count) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueryGroupsTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        String id = null;
        String idIn = null;
        String name = null;
        String nameLike = null;
        String type = null;
        String member = null;
        String memberOfTenant = null;
        List<GroupDto> response = api.getQueryGroups(sortBy, sortOrder, firstResult, maxResults, id, idIn, name, nameLike, type, member, memberOfTenant);

        // TODO: test validations
    }
    
    /**
     * Get List (POST)
     *
     * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count (POST)](https://docs.camunda.org/manual/7.18/reference/rest/group/post-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postQueryGroupsTest() throws ApiException {
        Integer firstResult = null;
        Integer maxResults = null;
        GroupQueryDto groupQueryDto = null;
        List<GroupDto> response = api.postQueryGroups(firstResult, maxResults, groupQueryDto);

        // TODO: test validations
    }
    
    /**
     * Get List Count (POST)
     *
     * Queries for groups using a list of parameters and retrieves the count.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryGroupCountTest() throws ApiException {
        GroupQueryDto groupQueryDto = null;
        CountResultDto response = api.queryGroupCount(groupQueryDto);

        // TODO: test validations
    }
    
    /**
     * Update Group
     *
     * Updates a given group by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        String id = null;
        GroupDto groupDto = null;
        api.updateGroup(id, groupDto);

        // TODO: test validations
    }
    
}
