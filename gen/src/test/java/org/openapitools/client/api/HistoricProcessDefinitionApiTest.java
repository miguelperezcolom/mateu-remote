/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CleanableHistoricProcessInstanceReportResultDto;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.openapitools.client.model.HistoricActivityStatisticsDto;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricProcessDefinitionApi
 */
@Ignore
public class HistoricProcessDefinitionApiTest {

    private final HistoricProcessDefinitionApi api = new HistoricProcessDefinitionApi();

    
    /**
     * Get Cleanable Process Instance Report
     *
     * Retrieves a report about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup))  so that you can tune the history time to live. These reports include the count of the finished historic process instances, cleanable process instances and basic process definition data - id, key, name and version. The size of the result set can be retrieved by using the [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCleanableHistoricProcessInstanceReportTest() throws ApiException {
        String processDefinitionIdIn = null;
        String processDefinitionKeyIn = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        Boolean compact = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        List<CleanableHistoricProcessInstanceReportResultDto> response = api.getCleanableHistoricProcessInstanceReport(processDefinitionIdIn, processDefinitionKeyIn, tenantIdIn, withoutTenantId, compact, sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Get Cleanable Process Instance Report Count
     *
     * Queries for the number of report results about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCleanableHistoricProcessInstanceReportCountTest() throws ApiException {
        String processDefinitionIdIn = null;
        String processDefinitionKeyIn = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        Boolean compact = null;
        CountResultDto response = api.getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn, processDefinitionKeyIn, tenantIdIn, withoutTenantId, compact);

        // TODO: test validations
    }
    
    /**
     * Get Historic Activity Statistics
     *
     * Retrieves historic statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token). **Note:** This only includes historic data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricActivityStatisticsTest() throws ApiException {
        String id = null;
        Boolean canceled = null;
        Boolean finished = null;
        Boolean completeScope = null;
        Boolean incidents = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        OffsetDateTime finishedBefore = null;
        OffsetDateTime finishedAfter = null;
        String processInstanceIdIn = null;
        String sortBy = null;
        String sortOrder = null;
        List<HistoricActivityStatisticsDto> response = api.getHistoricActivityStatistics(id, canceled, finished, completeScope, incidents, startedBefore, startedAfter, finishedBefore, finishedAfter, processInstanceIdIn, sortBy, sortOrder);

        // TODO: test validations
    }
    
}
