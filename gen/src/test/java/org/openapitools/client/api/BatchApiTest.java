/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchDto;
import org.openapitools.client.model.BatchStatisticsDto;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.SuspensionStateDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BatchApi
 */
@Ignore
public class BatchApiTest {

    private final BatchApi api = new BatchApi();

    
    /**
     * Delete
     *
     * Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBatchTest() throws ApiException {
        String id = null;
        Boolean cascade = null;
        api.deleteBatch(id, cascade);

        // TODO: test validations
    }
    
    /**
     * Get
     *
     * Retrieves a batch by id, according to the Batch interface in the engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchTest() throws ApiException {
        String id = null;
        BatchDto response = api.getBatch(id);

        // TODO: test validations
    }
    
    /**
     * Get Statistics
     *
     * Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the  [Get Batch Statistics Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchStatisticsTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        String batchId = null;
        String type = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        Boolean suspended = null;
        String createdBy = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        Boolean withFailures = null;
        Boolean withoutFailures = null;
        List<BatchStatisticsDto> response = api.getBatchStatistics(sortBy, sortOrder, firstResult, maxResults, batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures);

        // TODO: test validations
    }
    
    /**
     * Get Statistics Count
     *
     * Requests the number of batch statistics that fulfill the query criteria. Takes the same filtering parameters as the [Get Batch Statistics](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchStatisticsCountTest() throws ApiException {
        String batchId = null;
        String type = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        Boolean suspended = null;
        String createdBy = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        Boolean withFailures = null;
        Boolean withoutFailures = null;
        CountResultDto response = api.getBatchStatisticsCount(batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures);

        // TODO: test validations
    }
    
    /**
     * Get List
     *
     * Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the [Get Batch Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchesTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        String batchId = null;
        String type = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        Boolean suspended = null;
        String createdBy = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        Boolean withFailures = null;
        Boolean withoutFailures = null;
        List<BatchDto> response = api.getBatches(sortBy, sortOrder, firstResult, maxResults, batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures);

        // TODO: test validations
    }
    
    /**
     * Get List Count
     *
     * Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchesCountTest() throws ApiException {
        String batchId = null;
        String type = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        Boolean suspended = null;
        String createdBy = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        Boolean withFailures = null;
        Boolean withoutFailures = null;
        CountResultDto response = api.getBatchesCount(batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures);

        // TODO: test validations
    }
    
    /**
     * Activate/Suspend
     *
     * Activates or suspends a batch by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBatchSuspensionStateTest() throws ApiException {
        String id = null;
        SuspensionStateDto suspensionStateDto = null;
        api.updateBatchSuspensionState(id, suspensionStateDto);

        // TODO: test validations
    }
    
}
