/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import java.io.File;
import org.openapitools.client.model.VariableInstanceDto;
import org.openapitools.client.model.VariableInstanceQueryDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VariableInstanceApi
 */
@Ignore
public class VariableInstanceApiTest {

    private final VariableInstanceApi api = new VariableInstanceApi();

    
    /**
     * Get Variable Instance
     *
     * Retrieves a variable by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariableInstanceTest() throws ApiException {
        String id = null;
        Boolean deserializeValue = null;
        VariableInstanceDto response = api.getVariableInstance(id, deserializeValue);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instance (Binary)
     *
     * Retrieves the content of a variable by id. Applicable for byte array and file variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariableInstanceBinaryTest() throws ApiException {
        String id = null;
        File response = api.getVariableInstanceBinary(id);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instances
     *
     * Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariableInstancesTest() throws ApiException {
        String variableName = null;
        String variableNameLike = null;
        String processInstanceIdIn = null;
        String executionIdIn = null;
        String caseInstanceIdIn = null;
        String caseExecutionIdIn = null;
        String taskIdIn = null;
        String batchIdIn = null;
        String activityInstanceIdIn = null;
        String tenantIdIn = null;
        String variableValues = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String variableScopeIdIn = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        Boolean deserializeValues = null;
        List<VariableInstanceDto> response = api.getVariableInstances(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instance Count
     *
     * Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariableInstancesCountTest() throws ApiException {
        String variableName = null;
        String variableNameLike = null;
        String processInstanceIdIn = null;
        String executionIdIn = null;
        String caseInstanceIdIn = null;
        String caseExecutionIdIn = null;
        String taskIdIn = null;
        String batchIdIn = null;
        String activityInstanceIdIn = null;
        String tenantIdIn = null;
        String variableValues = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String variableScopeIdIn = null;
        String sortBy = null;
        String sortOrder = null;
        CountResultDto response = api.getVariableInstancesCount(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instances (POST)
     *
     * Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryVariableInstancesTest() throws ApiException {
        Integer firstResult = null;
        Integer maxResults = null;
        Boolean deserializeValues = null;
        VariableInstanceQueryDto variableInstanceQueryDto = null;
        List<VariableInstanceDto> response = api.queryVariableInstances(firstResult, maxResults, deserializeValues, variableInstanceQueryDto);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instance Count (POST)
     *
     * Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryVariableInstancesCountTest() throws ApiException {
        VariableInstanceQueryDto variableInstanceQueryDto = null;
        CountResultDto response = api.queryVariableInstancesCount(variableInstanceQueryDto);

        // TODO: test validations
    }
    
}
