/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import java.io.File;
import org.openapitools.client.model.HistoricVariableInstanceDto;
import org.openapitools.client.model.HistoricVariableInstanceQueryDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricVariableInstanceApi
 */
@Ignore
public class HistoricVariableInstanceApiTest {

    private final HistoricVariableInstanceApi api = new HistoricVariableInstanceApi();

    
    /**
     * Delete Variable Instance
     *
     * Deletes a historic variable instance by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHistoricVariableInstanceTest() throws ApiException {
        String id = null;
        api.deleteHistoricVariableInstance(id);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instance
     *
     * Retrieves a historic variable by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricVariableInstanceTest() throws ApiException {
        String id = null;
        Boolean deserializeValues = null;
        HistoricVariableInstanceDto response = api.getHistoricVariableInstance(id, deserializeValues);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instance (Binary)
     *
     * Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricVariableInstanceBinaryTest() throws ApiException {
        String id = null;
        File response = api.getHistoricVariableInstanceBinary(id);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instances
     *
     * Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricVariableInstancesTest() throws ApiException {
        String variableName = null;
        String variableNameLike = null;
        Object variableValue = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String variableTypeIn = null;
        Boolean includeDeleted = null;
        String processInstanceId = null;
        String processInstanceIdIn = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String executionIdIn = null;
        String caseInstanceId = null;
        String caseExecutionIdIn = null;
        String caseActivityIdIn = null;
        String taskIdIn = null;
        String activityInstanceIdIn = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String variableNameIn = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        Boolean deserializeValues = null;
        List<HistoricVariableInstanceDto> response = api.getHistoricVariableInstances(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, variableNameIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instance Count
     *
     * Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricVariableInstancesCountTest() throws ApiException {
        String variableName = null;
        String variableNameLike = null;
        Object variableValue = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String variableTypeIn = null;
        Boolean includeDeleted = null;
        String processInstanceId = null;
        String processInstanceIdIn = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String executionIdIn = null;
        String caseInstanceId = null;
        String caseExecutionIdIn = null;
        String caseActivityIdIn = null;
        String taskIdIn = null;
        String activityInstanceIdIn = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String variableNameIn = null;
        CountResultDto response = api.getHistoricVariableInstancesCount(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, variableNameIn);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instances (POST)
     *
     * Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryHistoricVariableInstancesTest() throws ApiException {
        Integer firstResult = null;
        Integer maxResults = null;
        Boolean deserializeValues = null;
        HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = null;
        List<HistoricVariableInstanceDto> response = api.queryHistoricVariableInstances(firstResult, maxResults, deserializeValues, historicVariableInstanceQueryDto);

        // TODO: test validations
    }
    
    /**
     * Get Variable Instance Count (POST)
     *
     * Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryHistoricVariableInstancesCountTest() throws ApiException {
        HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = null;
        CountResultDto response = api.queryHistoricVariableInstancesCount(historicVariableInstanceQueryDto);

        // TODO: test validations
    }
    
}
