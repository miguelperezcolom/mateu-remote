/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CountResultDto;
import org.openapitools.client.model.ExceptionDto;
import org.openapitools.client.model.HistoricTaskInstanceDto;
import org.openapitools.client.model.HistoricTaskInstanceQueryDto;
import org.openapitools.client.model.HistoricTaskInstanceReportResultDto;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricTaskInstanceApi
 */
@Ignore
public class HistoricTaskInstanceApiTest {

    private final HistoricTaskInstanceApi api = new HistoricTaskInstanceApi();

    
    /**
     * Get Task Report (Historic)
     *
     * Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricTaskInstanceReportTest() throws ApiException {
        String reportType = null;
        String periodUnit = null;
        OffsetDateTime completedBefore = null;
        OffsetDateTime completedAfter = null;
        String groupBy = null;
        List<HistoricTaskInstanceReportResultDto> response = api.getHistoricTaskInstanceReport(reportType, periodUnit, completedBefore, completedAfter, groupBy);

        // TODO: test validations
    }
    
    /**
     * Get Tasks (Historic)
     *
     * Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.18/reference/rest/history/task/get-task-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricTaskInstancesTest() throws ApiException {
        String taskId = null;
        String taskParentTaskId = null;
        String processInstanceId = null;
        String processInstanceBusinessKey = null;
        String processInstanceBusinessKeyIn = null;
        String processInstanceBusinessKeyLike = null;
        String executionId = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processDefinitionName = null;
        String caseInstanceId = null;
        String caseExecutionId = null;
        String caseDefinitionId = null;
        String caseDefinitionKey = null;
        String caseDefinitionName = null;
        String activityInstanceIdIn = null;
        String taskName = null;
        String taskNameLike = null;
        String taskDescription = null;
        String taskDescriptionLike = null;
        String taskDefinitionKey = null;
        String taskDefinitionKeyIn = null;
        String taskDeleteReason = null;
        String taskDeleteReasonLike = null;
        String taskAssignee = null;
        String taskAssigneeLike = null;
        String taskOwner = null;
        String taskOwnerLike = null;
        Integer taskPriority = null;
        Boolean assigned = null;
        Boolean unassigned = null;
        Boolean finished = null;
        Boolean unfinished = null;
        Boolean processFinished = null;
        Boolean processUnfinished = null;
        OffsetDateTime taskDueDate = null;
        OffsetDateTime taskDueDateBefore = null;
        OffsetDateTime taskDueDateAfter = null;
        Boolean withoutTaskDueDate = null;
        OffsetDateTime taskFollowUpDate = null;
        OffsetDateTime taskFollowUpDateBefore = null;
        OffsetDateTime taskFollowUpDateAfter = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        OffsetDateTime finishedBefore = null;
        OffsetDateTime finishedAfter = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String taskVariables = null;
        String processVariables = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String taskInvolvedUser = null;
        String taskInvolvedGroup = null;
        String taskHadCandidateUser = null;
        String taskHadCandidateGroup = null;
        Boolean withCandidateGroups = null;
        Boolean withoutCandidateGroups = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        List<HistoricTaskInstanceDto> response = api.getHistoricTaskInstances(taskId, taskParentTaskId, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, executionId, processDefinitionId, processDefinitionKey, processDefinitionName, caseInstanceId, caseExecutionId, caseDefinitionId, caseDefinitionKey, caseDefinitionName, activityInstanceIdIn, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskDefinitionKey, taskDefinitionKeyIn, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskPriority, assigned, unassigned, finished, unfinished, processFinished, processUnfinished, taskDueDate, taskDueDateBefore, taskDueDateAfter, withoutTaskDueDate, taskFollowUpDate, taskFollowUpDateBefore, taskFollowUpDateAfter, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, taskVariables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, taskInvolvedUser, taskInvolvedGroup, taskHadCandidateUser, taskHadCandidateGroup, withCandidateGroups, withoutCandidateGroups, sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Get Task Count
     *
     * Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.18/reference/rest/history/task/get-task-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricTaskInstancesCountTest() throws ApiException {
        String taskId = null;
        String taskParentTaskId = null;
        String processInstanceId = null;
        String processInstanceBusinessKey = null;
        String processInstanceBusinessKeyIn = null;
        String processInstanceBusinessKeyLike = null;
        String executionId = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processDefinitionName = null;
        String caseInstanceId = null;
        String caseExecutionId = null;
        String caseDefinitionId = null;
        String caseDefinitionKey = null;
        String caseDefinitionName = null;
        String activityInstanceIdIn = null;
        String taskName = null;
        String taskNameLike = null;
        String taskDescription = null;
        String taskDescriptionLike = null;
        String taskDefinitionKey = null;
        String taskDefinitionKeyIn = null;
        String taskDeleteReason = null;
        String taskDeleteReasonLike = null;
        String taskAssignee = null;
        String taskAssigneeLike = null;
        String taskOwner = null;
        String taskOwnerLike = null;
        Integer taskPriority = null;
        Boolean assigned = null;
        Boolean unassigned = null;
        Boolean finished = null;
        Boolean unfinished = null;
        Boolean processFinished = null;
        Boolean processUnfinished = null;
        OffsetDateTime taskDueDate = null;
        OffsetDateTime taskDueDateBefore = null;
        OffsetDateTime taskDueDateAfter = null;
        Boolean withoutTaskDueDate = null;
        OffsetDateTime taskFollowUpDate = null;
        OffsetDateTime taskFollowUpDateBefore = null;
        OffsetDateTime taskFollowUpDateAfter = null;
        OffsetDateTime startedBefore = null;
        OffsetDateTime startedAfter = null;
        OffsetDateTime finishedBefore = null;
        OffsetDateTime finishedAfter = null;
        String tenantIdIn = null;
        Boolean withoutTenantId = null;
        String taskVariables = null;
        String processVariables = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String taskInvolvedUser = null;
        String taskInvolvedGroup = null;
        String taskHadCandidateUser = null;
        String taskHadCandidateGroup = null;
        Boolean withCandidateGroups = null;
        Boolean withoutCandidateGroups = null;
        CountResultDto response = api.getHistoricTaskInstancesCount(taskId, taskParentTaskId, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, executionId, processDefinitionId, processDefinitionKey, processDefinitionName, caseInstanceId, caseExecutionId, caseDefinitionId, caseDefinitionKey, caseDefinitionName, activityInstanceIdIn, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskDefinitionKey, taskDefinitionKeyIn, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskPriority, assigned, unassigned, finished, unfinished, processFinished, processUnfinished, taskDueDate, taskDueDateBefore, taskDueDateAfter, withoutTaskDueDate, taskFollowUpDate, taskFollowUpDateBefore, taskFollowUpDateAfter, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, taskVariables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, taskInvolvedUser, taskInvolvedGroup, taskHadCandidateUser, taskHadCandidateGroup, withCandidateGroups, withoutCandidateGroups);

        // TODO: test validations
    }
    
    /**
     * Get Tasks (Historic) (POST)
     *
     * Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.18/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/task/post-task-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryHistoricTaskInstancesTest() throws ApiException {
        Integer firstResult = null;
        Integer maxResults = null;
        HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = null;
        List<HistoricTaskInstanceDto> response = api.queryHistoricTaskInstances(firstResult, maxResults, historicTaskInstanceQueryDto);

        // TODO: test validations
    }
    
    /**
     * Get Task Count (POST)
     *
     * Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.18/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/task/post-task-query/) method and takes the same parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryHistoricTaskInstancesCountTest() throws ApiException {
        HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = null;
        CountResultDto response = api.queryHistoricTaskInstancesCount(historicTaskInstanceQueryDto);

        // TODO: test validations
    }
    
}
