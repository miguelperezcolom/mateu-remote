/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AbstractSetRemovalTimeDto;
import org.openapitools.client.model.SetRemovalTimeToHistoricBatchesDtoAllOf;
import org.threeten.bp.OffsetDateTime;

/**
 * SetRemovalTimeToHistoricBatchesDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-24T18:24:37.267768300+01:00[Europe/Paris]")
public class SetRemovalTimeToHistoricBatchesDto {
  public static final String SERIALIZED_NAME_HISTORIC_BATCH_QUERY = "historicBatchQuery";
  @SerializedName(SERIALIZED_NAME_HISTORIC_BATCH_QUERY)
  private Object historicBatchQuery;

  public static final String SERIALIZED_NAME_HISTORIC_BATCH_IDS = "historicBatchIds";
  @SerializedName(SERIALIZED_NAME_HISTORIC_BATCH_IDS)
  private List<String> historicBatchIds = null;

  public static final String SERIALIZED_NAME_ABSOLUTE_REMOVAL_TIME = "absoluteRemovalTime";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_REMOVAL_TIME)
  private OffsetDateTime absoluteRemovalTime;

  public static final String SERIALIZED_NAME_CLEARED_REMOVAL_TIME = "clearedRemovalTime";
  @SerializedName(SERIALIZED_NAME_CLEARED_REMOVAL_TIME)
  private Boolean clearedRemovalTime;

  public static final String SERIALIZED_NAME_CALCULATED_REMOVAL_TIME = "calculatedRemovalTime";
  @SerializedName(SERIALIZED_NAME_CALCULATED_REMOVAL_TIME)
  private Boolean calculatedRemovalTime;


  public SetRemovalTimeToHistoricBatchesDto historicBatchQuery(Object historicBatchQuery) {
    
    this.historicBatchQuery = historicBatchQuery;
    return this;
  }

   /**
   * Query for the historic batches to set the removal time for.
   * @return historicBatchQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Query for the historic batches to set the removal time for.")

  public Object getHistoricBatchQuery() {
    return historicBatchQuery;
  }


  public void setHistoricBatchQuery(Object historicBatchQuery) {
    this.historicBatchQuery = historicBatchQuery;
  }


  public SetRemovalTimeToHistoricBatchesDto historicBatchIds(List<String> historicBatchIds) {
    
    this.historicBatchIds = historicBatchIds;
    return this;
  }

  public SetRemovalTimeToHistoricBatchesDto addHistoricBatchIdsItem(String historicBatchIdsItem) {
    if (this.historicBatchIds == null) {
      this.historicBatchIds = new ArrayList<String>();
    }
    this.historicBatchIds.add(historicBatchIdsItem);
    return this;
  }

   /**
   * The ids of the historic batches to set the removal time for.
   * @return historicBatchIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ids of the historic batches to set the removal time for.")

  public List<String> getHistoricBatchIds() {
    return historicBatchIds;
  }


  public void setHistoricBatchIds(List<String> historicBatchIds) {
    this.historicBatchIds = historicBatchIds;
  }


  public SetRemovalTimeToHistoricBatchesDto absoluteRemovalTime(OffsetDateTime absoluteRemovalTime) {
    
    this.absoluteRemovalTime = absoluteRemovalTime;
    return this;
  }

   /**
   * The date for which the instances shall be removed. Value may not be &#x60;null&#x60;.  **Note:** Cannot be set in conjunction with &#x60;clearedRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.
   * @return absoluteRemovalTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date for which the instances shall be removed. Value may not be `null`.  **Note:** Cannot be set in conjunction with `clearedRemovalTime` or `calculatedRemovalTime`.")

  public OffsetDateTime getAbsoluteRemovalTime() {
    return absoluteRemovalTime;
  }


  public void setAbsoluteRemovalTime(OffsetDateTime absoluteRemovalTime) {
    this.absoluteRemovalTime = absoluteRemovalTime;
  }


  public SetRemovalTimeToHistoricBatchesDto clearedRemovalTime(Boolean clearedRemovalTime) {
    
    this.clearedRemovalTime = clearedRemovalTime;
    return this;
  }

   /**
   * Sets the removal time to &#x60;null&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.
   * @return clearedRemovalTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sets the removal time to `null`. Value may only be `true`, as `false` is the default behavior.  **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `calculatedRemovalTime`.")

  public Boolean getClearedRemovalTime() {
    return clearedRemovalTime;
  }


  public void setClearedRemovalTime(Boolean clearedRemovalTime) {
    this.clearedRemovalTime = clearedRemovalTime;
  }


  public SetRemovalTimeToHistoricBatchesDto calculatedRemovalTime(Boolean calculatedRemovalTime) {
    
    this.calculatedRemovalTime = calculatedRemovalTime;
    return this;
  }

   /**
   * The removal time is calculated based on the engine&#39;s configuration settings. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;clearedRemovalTime&#x60;.
   * @return calculatedRemovalTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The removal time is calculated based on the engine's configuration settings. Value may only be `true`, as `false` is the default behavior.  **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `clearedRemovalTime`.")

  public Boolean getCalculatedRemovalTime() {
    return calculatedRemovalTime;
  }


  public void setCalculatedRemovalTime(Boolean calculatedRemovalTime) {
    this.calculatedRemovalTime = calculatedRemovalTime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetRemovalTimeToHistoricBatchesDto setRemovalTimeToHistoricBatchesDto = (SetRemovalTimeToHistoricBatchesDto) o;
    return Objects.equals(this.historicBatchQuery, setRemovalTimeToHistoricBatchesDto.historicBatchQuery) &&
        Objects.equals(this.historicBatchIds, setRemovalTimeToHistoricBatchesDto.historicBatchIds) &&
        Objects.equals(this.absoluteRemovalTime, setRemovalTimeToHistoricBatchesDto.absoluteRemovalTime) &&
        Objects.equals(this.clearedRemovalTime, setRemovalTimeToHistoricBatchesDto.clearedRemovalTime) &&
        Objects.equals(this.calculatedRemovalTime, setRemovalTimeToHistoricBatchesDto.calculatedRemovalTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(historicBatchQuery, historicBatchIds, absoluteRemovalTime, clearedRemovalTime, calculatedRemovalTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetRemovalTimeToHistoricBatchesDto {\n");
    sb.append("    historicBatchQuery: ").append(toIndentedString(historicBatchQuery)).append("\n");
    sb.append("    historicBatchIds: ").append(toIndentedString(historicBatchIds)).append("\n");
    sb.append("    absoluteRemovalTime: ").append(toIndentedString(absoluteRemovalTime)).append("\n");
    sb.append("    clearedRemovalTime: ").append(toIndentedString(clearedRemovalTime)).append("\n");
    sb.append("    calculatedRemovalTime: ").append(toIndentedString(calculatedRemovalTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

